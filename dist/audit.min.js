async function F($){try{const j=await fetch("https://text.pollinations.ai/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:"You are an assistant specialized in analyzing Oplog data."},{role:"user",content:$}],model:"openai",seed:Math.floor(Math.random()*1000),jsonMode:!0})});if(!j.ok)throw new Error(`Pollinations API error: ${j.statusText}`);const v=await j.json();try{return typeof v==="string"?JSON.parse(v):v}catch{return v}}catch(w){throw console.error("Error processing prompt with API:",w.message),w}}function J($,w,j={}){console.log("\uD83E\uDDE0 AI Audit module loaded."),console.log(`\uD83E\uDDE0 AI Audit Prompt: \x1B[32m${j.prompt}\x1B[0m`);let v=null;function B(z){if(v)v();v=(($.map?.(({id:k,value:I,action:C})=>{if(C==="added"||C==="updated"||C==="initial")H($,z)}))??{unsubscribe:()=>{}}).unsubscribe}return B(j.prompt),{stop:()=>v?.()}}var E=($,w=500)=>{let j;return(...v)=>{clearTimeout(j),j=setTimeout(()=>$(...v),w)}},G=async($,w="Flag offensive/prohibited content and consecutive entries with timestamps <150ms apart.")=>{console.log("\uD83D\uDEE1\uFE0F Audit: analizing Oplog data");const j=$.oplog.getDelta(null),v=[];for(let x of j)try{const{result:k}=await $.get(x.id);if(k&&k.value)v.push({id:x.id,timestamp:x.timestamp,type:x.type,value:k.value})}catch(k){}const B=`
    You are an assistant specialized in analyzing Oplog data.

    Analyze the following array of JSON objects called "elements":
    ${JSON.stringify(v,null,2)}

    Use the following criteria:
    "${w}"

    Rules:
    - Return ONLY a JSON object with a property "list", which is an array of objects containing the IDs of the elements that meet the criteria.
    - If an element does NOT meet the criteria, do NOT include its ID.
    - Do NOT modify the original objects.

    Example output format:
    {
      "list": [
        { "id": "<id>" }
      ]
    }
  `,z=await F(B);if(z.list&&Array.isArray(z.list))for(let x of z.list){const k=x.id??x;$.remove?.(k),$.oplog?.remove?.(k),console.log(`\uD83D\uDEE1\uFE0F Audit: Node deleted by audit \u2192 ${k}`)}},H=E(G,500);export{J as init,E as debounce};
