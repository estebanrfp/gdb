async function B(v){try{const w=await fetch("https://text.pollinations.ai/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:"You are an assistant specialized in analyzing Oplog data."},{role:"user",content:v}],model:"openai",seed:Math.floor(Math.random()*1000),jsonMode:!0})});if(!w.ok)throw new Error(`Pollinations API error: ${w.statusText}`);const h=await w.json();try{return typeof h==="string"?JSON.parse(h):h}catch{return h}}catch(S){throw console.error("Error processing prompt with API:",S.message),S}}function H(v,S,w={}){console.log("\uD83E\uDDE0 AI Audit module loaded."),console.log(`\uD83E\uDDE0 AI Audit Prompt: \x1B[32m${w.prompt}\x1B[0m`);let h=null;function x(k){if(h)h();h=((v.map?.(({id:J,value:F,action:G})=>{E(v,k)}))??{unsubscribe:()=>{}}).unsubscribe}return x(w.prompt),{stop:()=>h?.()}}var z=(v,S=500)=>{let w;return(...h)=>{clearTimeout(w),w=setTimeout(()=>v(...h),S)}},C=async(v,S="detect offensive or inappropriate language, spam [find closely spaced timestamps] or prohibited content")=>{console.log("\uD83D\uDEE1\uFE0F Audit: analizing Oplog data");const w=v.oplog.getDelta(null),h=[];for(let j of w)try{const{result:J}=await v.get(j.id);if(J&&J.value)h.push({id:j.id,timestamp:j.timestamp,type:j.type,value:J.value})}catch(J){}const x=`
      You are an assistant specialized in analyzing and auditing data records. Your role is to help the user identify patterns and act on prompts:
      
      Rules:
      - Generate ONLY a valid JSON object whose identifiers have been proposed.

      Prompt: "${S}"
      Elements to analyze: "${JSON.stringify(h)}" (only upserted nodes)
      Output found list example: list:{["id": xx], ["id": xx]} or list:{}
    `,k=await B(x);if(k.list&&Array.isArray(k.list))for(let j of k.list){const J=j.id??j;v.remove?.(J),v.oplog?.remove?.(J),console.log(`\uD83D\uDEE1\uFE0F Audit: Node deleted by audit \u2192 ${J}`)}},E=z(C,500);export{H as init,z as debounce};
