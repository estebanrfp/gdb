function w(c){const S=c.map;return c.map=async function(...E){const N=await S.call(this,...E),b=E.find((h)=>h&&typeof h==="object")||{},{prompt:f}=b;if(f)N.results=await k(N.results,f);return N},c}async function k(c,S){const E=c.map((f)=>f.value),N=`
${S}

Reglas estrictas:
- Devuelve un array JSON con la MISMA estructura de entrada.
- Cada elemento del array debe ser una modificaci\xF3n del objeto correspondiente en la entrada.
- S\xF3lo se deben modificar campos DENTRO del objeto \`value\`.
- NO a\xF1adas, elimines ni reestructures nodos externos como \`id\`, \`edges\`, o \`timestamp\`.
- NO agregues explicaciones ni texto adicional. Devuelve SOLO el array JSON con los objetos \`value\` modificados.

Ejemplo de entrada:
${JSON.stringify(E)}
`,b=await v(N);return console.log(b),c.map((f,h)=>{const j=Array.isArray(b)?b[h]:b;return{...f,value:{...f.value,...j||{}}}})}async function v(c){try{const E=await fetch("https://text.pollinations.ai/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:"You are an AI assistant specialized in processing structured data objects."},{role:"user",content:c}],model:"openai",seed:Math.floor(Math.random()*1000),jsonMode:!0})});if(!E.ok)throw new Error(`Error calling the Pollinations API: ${E.statusText}`);const N=await E.json();return N.data||N}catch(S){throw console.error("Error processing the prompt with the Pollinations API:",S.message),S}}export{w as withAI};
