function F(b){const f=b.map;return b.map=async function(...j){const c=await f.call(this,...j),k=j.find((w)=>w&&typeof w==="object")||{},{prompt:v}=k;if(v)c.results=await C(c.results,v);return c},b}async function C(b,f){const j=b.map((v)=>v.value),c=`
${f}

Reglas estrictas:
- Devuelve un array JSON con la MISMA estructura de entrada.
- Cada elemento del array debe ser una modificaci\xF3n del objeto correspondiente en la entrada.
- S\xF3lo se deben modificar campos DENTRO del objeto \`value\`.
- NO a\xF1adas, elimines ni reestructures nodos externos como \`id\`, \`edges\`, o \`timestamp\`.
- NO agregues explicaciones ni texto adicional. Devuelve SOLO el array JSON con los objetos \`value\` modificados.

Ejemplo de entrada:
${JSON.stringify(j)}
`,k=await E(c);return console.log(k),b.map((v,w)=>{const z=Array.isArray(k)?k[w]:k;return{...v,value:{...v.value,...z||{}}}})}async function E(b){try{const j=await fetch("https://text.pollinations.ai/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:"You are an AI assistant specialized in processing structured data objects."},{role:"user",content:b}],model:"openai",seed:Math.floor(Math.random()*1000),jsonMode:!0})});if(!j.ok)throw new Error(`Error calling the Pollinations API: ${j.statusText}`);const c=await j.json();return c.data||c}catch(f){throw console.error("Error processing the prompt with the Pollinations API:",f.message),f}}export{F as withAI};
