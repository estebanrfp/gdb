function G(j){const y=j.map;return j.map=async function(...b){const w=await y.call(this,...b),k=b.find((C)=>C&&typeof C==="object")||{},{prompt:z}=k;if(z)w.results=await E(w.results,z),console.log(w.results);return w},j}async function E(j,y){const b=j.map((z)=>z.value),w=`
    ${y}
    
    Input Data:
    ${JSON.stringify(b)}
    
    Instructions:
    - Process the input data as specified in the prompt.
    - Modify only the 'body' field of each object and return the same object structure.
    - Do not create new fields or objects.
    - Return the modified data as a JSON array of objects with the same structure as the input.
  `,k=await F(w);if(Array.isArray(k)&&k.length===j.length)return j.map((z,C)=>({...z,value:k[C]}));else return console.warn("The AI response does not match the expected format. Returning original results."),j}async function F(j){try{const b=await fetch("https://text.pollinations.ai/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:"You are an AI assistant specialized in processing structured data objects."},{role:"user",content:j}],model:"openai",seed:Math.floor(Math.random()*1000),jsonMode:!0})});if(!b.ok)throw new Error(`Error calling the Pollinations API: ${b.statusText}`);const w=await b.json(),k=w.data||w;if(!Array.isArray(k))throw console.error("The API response does not contain a valid array:",w),new Error("Invalid response format.");return k}catch(y){throw console.error("Error processing the prompt with the Pollinations API:",y.message),y}}export{G as withAI};
