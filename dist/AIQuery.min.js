function v(y){const C=y.map;return y.map=async function(...f){let h={},U=null;if(f.forEach((j)=>{if(typeof j==="object")h={...h,...j};if(typeof j==="function")U=j}),h.prompt)try{const j=await $(h.prompt);console.log("Consulta generada desde IA:",j),h={...h,...j},delete h.prompt}catch(j){console.error("Error generando consulta desde IA:",j.message),h.query={}}return C.call(this,h,U)},y}async function $(y){const C=`
      Convierte la siguiente instrucci\xF3n en lenguaje natural a un objeto de consulta estructurado:
      "${y}"
  
      Reglas:
      - Devuelve un JSON con campos "query", "order" y "field"
      - Usa operadores MongoDB como "$between", "$gt", "$lt"
      - Para rangos usa "$between": [min, max]
      - Para ordenamiento usa "order": "asc" o "desc" y especifica "field"
      - Ejemplo: 
        Entrada: "Busca personas de 10-20 a\xF1os y ord\xE9nalas por edad descendente"
        Salida: {"query": {"age": {"$between": [10, 20]}}, "order": "desc", "field": "age"}
      
      Responde SOLO con el JSON, sin texto adicional.
    `;try{const f=await q(C);if(f&&typeof f==="object"&&f.query)return{query:f.query,order:f.order||"asc",field:f.field||Object.keys(f.query)[0]};throw new Error("Formato de respuesta de IA inv\xE1lido")}catch(f){return console.warn("Usando consulta vac\xEDa debido a error de IA:",f.message),{query:{}}}}async function q(y){try{const f=await fetch("https://text.pollinations.ai/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:"Eres un asistente especializado en convertir lenguaje natural a consultas estructuradas."},{role:"user",content:y}],model:"openai",seed:Math.floor(Math.random()*1000),jsonMode:!0})});if(!f.ok)throw new Error(`Error en la API de Pollinations: ${f.statusText}`);const h=await f.json();try{return typeof h==="string"?JSON.parse(h):h}catch{return h}}catch(C){throw console.error("Error procesando el prompt con la API:",C.message),C}}export{v as withAI};
