function q(v){const E=v.map;return v.map=async function(...j){let I={},N=null;if(j.forEach((h)=>{if(typeof h==="object")I={...I,...h};if(typeof h==="function")N=h}),I.prompt)try{const h=await T(I.prompt);console.log("Query generated from AI:",h),I={...I,...h},delete I.prompt}catch(h){console.error("Error generating query from AI:",h.message),I.query={}}return E.call(this,I,N)},v}async function T(v){const E=`
      You are an assistant that converts natural language instructions into a structured MongoDB query object.
      
      Rules:
      - Output ONLY a valid JSON object with the fields: "query", "order", and "field".
      - Use MongoDB operators such as "\$between", "\$gt", "\$lt".
      - For ranges, use "\$between": [min, max].
      - For sorting, use "order": "asc" or "desc" and specify the "field".
      - "\$edge" operator: allows chaining queries to related/descendant entities.
      - No extra text, no explanations, no formatting besides the JSON.

      Examples:
      Input: "Find people aged 10 to 20 and sort them by age descending"
      Output: {"query": {"age": {"\$between": [10, 20]}}, "order": "desc", "field": "age"}

      Input: "Find a Company, then find a Developer descendant, then find that Developer's descendant named Bob."
      Output: {"query": {"type":"Company", "\$edge": {"role":"Developer", "\$edge": {"name":"Bob"}}}}

      Instruction:
      "${v}"
    `;try{const j=await f(E);if(j&&typeof j==="object"&&j.query)return{query:j.query,order:j.order||"asc",field:j.field||Object.keys(j.query)[0]};throw new Error("Invalid AI response format")}catch(j){return console.warn("Using empty query due to AI error:",j.message),{query:{}}}}async function f(v){try{const j=await fetch("https://text.pollinations.ai/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:"You are an assistant specialized in converting natural language to structured queries."},{role:"user",content:v}],model:"openai",seed:Math.floor(Math.random()*1000),jsonMode:!0})});if(!j.ok)throw new Error(`Pollinations API error: ${j.statusText}`);const I=await j.json();try{return typeof I==="string"?JSON.parse(I):I}catch{return I}}catch(E){throw console.error("Error processing prompt with API:",E.message),E}}export{q as withAI};
