function z(A){const E=A.map;return A.map=async function(...j){let w={},L=null;if(j.forEach((x)=>{if(typeof x==="object")w={...w,...x};if(typeof x==="function")L=x}),w.prompt)try{const x=await f(w.prompt);console.log("Consulta generada desde IA:",x),w={...w,...x},delete w.prompt}catch(x){console.error("Error generando consulta desde IA:",x.message),w.query={}}return E.call(this,w,L)},A}async function f(A){const E=`
      Convierte la siguiente instrucci\xF3n en lenguaje natural a un objeto de consulta estructurado:
      "${A}"
  
      Reglas:
      - Devuelve un JSON con campos "query", "order" y "field"
      - Usa operadores MongoDB como "$between", "$gt", "$lt"
      - Para rangos usa "$between": [min, max]
      - Para ordenamiento usa "order": "asc" o "desc" y especifica "field"
      - Ejemplo: 
        Entrada: "Busca personas de 10-20 a\xF1os y ord\xE9nalas por edad descendente"
        Salida: {"query": {"age": {"$between": [10, 20]}}, "order": "desc", "field": "age"}
      
      Responde SOLO con el JSON, sin texto adicional.
    `;try{const j=await v(E);if(j&&typeof j==="object"&&j.query)return{query:j.query,order:j.order||"asc",field:j.field||Object.keys(j.query)[0]};throw new Error("Formato de respuesta de IA inv\xE1lido")}catch(j){return console.warn("Usando consulta vac\xEDa debido a error de IA:",j.message),{query:{}}}}async function v(A){try{const j=await fetch("https://text.pollinations.ai/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"system",content:"Eres un asistente especializado en convertir lenguaje natural a consultas estructuradas."},{role:"user",content:A}],model:"openai",seed:Math.floor(Math.random()*1000),jsonMode:!0})});if(!j.ok)throw new Error(`Error en la API de Pollinations: ${j.statusText}`);const w=await j.json();try{return typeof w==="string"?JSON.parse(w):w}catch{return w}}catch(E){throw console.error("Error procesando el prompt con la API:",E.message),E}}export{z as withAI};
