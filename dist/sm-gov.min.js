var T,w=[],j,h=!1,y=async()=>{for(let k of w)try{const{results:q=[]}=await T.map({query:k.if});if(!q.length)continue;await Promise.all(q.map(async({id:V,timestamp:P})=>{const[,f]=V.split(":");if(!k.offsetTimestamp||P.physical<=Date.now()-k.offsetTimestamp)await z(k.then,f)}))}catch(q){console.error("\u274C GOVERNANCE ERROR: Failed to process rule.",{rule:k,error:q.message})}},z=async(k,q)=>{if(!k.assignRole)return;const{result:V}=await T.get(`user:${q}`),P=V?.value?.role;if(!P||P==="superadmin"||P===k.assignRole)return;await T.sm.executeWithPermission("assignRole"),await T.sm.assignRole(q,k.assignRole)},B=()=>{if(h)return;console.log("\u2705 GOVERNANCE ENGINE: Activated. Starting periodic checks."),j=setInterval(y,4000),h=!0},D=()=>{if(!h)return;clearInterval(j),j=null,h=!1,console.log("\uD83D\uDED1 GOVERNANCE ENGINE: Deactivated. Pausing checks.")},G=(k,{governanceRules:q,superAdmins:V}={})=>{if(!k||!q)return console.error("\u274C GOVERNANCE: Initialization failed: gdb instance and rules are required.");T=k,w=q,k.sm.setGovernanceStateChangeCallback(async({isActive:P,activeAddress:f})=>{if(P&&f&&V.includes(f))await T.sm.executeWithPermission("assignRole"),B();else D()})};export{G as start};
