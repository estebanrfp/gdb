async function H(){if(!h)return;console.log("\uD83D\uDCDC Governance: Running periodic check...");const f=JSON.parse(JSON.stringify(K).replace(/"Date\.now\(\) - (\d+)"/g,(z,P)=>Date.now()-parseInt(P)));for(let z of f){const{timeCheck:P,...q}=z.if,{results:D}=await p.map({query:q});if(D.length===0)continue;for(let j of D){let G=!0;if(P&&j.timestamp?.physical){if(Date.now()-j.timestamp.physical<P.ms)G=!1}if(G){const x=z.then.assignRole;if(j.value.role!==x){const L=j.id.split(":")[1];await O(L,x)}}}}}async function O(f,z){try{console.log(`\uD83D\uDE80 GOVERNANCE ACTION: Promoting ${f.slice(0,10)}... to '${z}'.`),await p.sm.assignRole(f,z)}catch(P){console.error(`\u274C GOVERNANCE ERROR: Failed to promote ${f}: ${P.message}`)}}var Q=function(){if(h)return;h=!0,console.log("\u2705 GOVERNANCE ENGINE: Activated. Starting periodic checks."),H(),B=setInterval(H,15000)},J=function(){if(!h)return;h=!1,clearInterval(B),B=null,console.log("\uD83D\uDED1 GOVERNANCE ENGINE: Deactivated. Pausing checks.")};async function T({isActive:f}){if(!f)return J();try{await p.sm.executeWithPermission("assignRole"),Q()}catch(z){J()}}function V(f,z){if(!f||!z)return console.error("\u274C Init failed.");p=f;const q=JSON.stringify(z).replace(/Date\.now\(\) - (\d+)/g,'"Date.now() - $1"');K=JSON.parse(q),f.sm.setSecurityStateChangeCallback(T),console.log("\uD83D\uDCDC Governance module initialized.")}var p=null,K=[],B=null,h=!1;export{V as start};
