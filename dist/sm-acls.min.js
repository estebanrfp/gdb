async function y(k,V){console.info("\uD83D\uDEE1\uFE0F SM-ACLs: Starting ACL module...");try{const z=await Z(k,V);if(z)try{Object.defineProperty(k.sm,"acls",{value:z,writable:!0,enumerable:!1,configurable:!0}),console.info("\u2705 SM-ACLs: ACL module initialized and attached to gdb.sm.acls.")}catch(H){throw console.error("\u274C SM-ACLs: Failed to attach to gdb.sm.acls. gdb.sm is not extensible.",H.message),new Error("SM-ACLs: Cannot attach ACL module to gdb.sm. Please ensure gdb.sm is extensible.")}else console.warn("\u26A0\uFE0F SM-ACLs: ACL module not activated (options not provided).")}catch(z){throw console.error("\u274C SM-ACLs: Failed to start ACL module.",z),z}}var Z=async(k,V)=>{if(!V)return null;const z="owner",H="collaborators",Q=()=>{const j=k.sm.getActiveEthAddress();if(!j)throw new Error("[SM-ACLs] An active user session is required.");return j},X=async(j,x)=>{const f=[];for(let h of j){const{signer:G,type:J,id:K}=h;if(!G||!K){f.push(h);continue}const T=x.get(K),{[z]:P,[H]:Y={}}=T?.value||{};if(J==="put"){if(!T||G===P||Y[G]==="write")f.push(h);else console.warn(`[SM-ACLs] DENIED (put): ${G} lacks write permission on ${K}`);continue}if(J==="remove"){if(!T||P===void 0||G===P)f.push(h);else console.warn(`[SM-ACLs] DENIED (remove): ${G} is not the owner of ${K}`);continue}f.push(h)}return f};return k.use(X),{async set(j,x){const f=Q(),{result:h}=await k.get(x);if(h){const{[z]:G,[H]:J={}}=h.value;if(f!==G&&J[f]!=="write")throw new Error(`[SM-ACLs] Write permission denied for node ${x}.`);const{[z]:K,[H]:T,...P}=j;return k.put({...h.value,...P},x)}return k.put({...j,[z]:f,[H]:{}},x)},async grant(j,x,f){const h=Q();if(!["read","write"].includes(f))throw new Error("[SM-ACLs] Permission must be 'read' or 'write'.");const{result:G}=await k.get(j);if(!G)throw new Error(`[SM-ACLs] Node ${j} not found.`);if(G.value[z]!==h)throw new Error("[SM-ACLs] Only the owner can grant permissions.");const J={...G.value[H]||{},[x]:f};await k.put({...G.value,[H]:J},j)},async revoke(j,x){const f=Q(),{result:h}=await k.get(j);if(!h)throw new Error(`[SM-ACLs] Node ${j} not found.`);if(h.value[z]!==f)throw new Error("[SM-ACLs] Only the owner can revoke permissions.");const{[x]:G,...J}=h.value[H]||{};await k.put({...h.value,[H]:J},j)},async delete(j){const x=Q(),{result:f}=await k.get(j);if(!f)return;if(f.value[z]!==x)throw new Error("[SM-ACLs] Only the owner can delete this node.");await k.remove(j)},async getPermissions(j){const{result:x}=await k.get(j);if(!x||x.value[z]===void 0)return null;return{owner:x.value[z],collaborators:x.value[H]||{}}}}};export{y as start};
