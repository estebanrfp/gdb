function E(f,w){const b=new x(f,w),m=f.saveGraphToOPFS;f.saveGraphToOPFS=async function(){await m.call(this);const q=this.graph.serialize();console.log("\u26A1 Forcing sync with centralized storage...");try{await b.syncWithCentralizedStorage(q)}catch(A){console.error("\u26A1 Failed to sync with centralized storage:",A.message)}};const y=f.loadGraphFromOPFS;return f.loadGraphFromOPFS=async function(){if(await y.call(this),Object.keys(this.graph.nodes).length===0){console.log("\u26A1 OPFS is empty. Loading from centralized storage.");try{await b.loadFromCentralizedStorage()}catch(q){console.error("\u26A1 Failed to load from centralized storage:",q.message)}}},f}class x{constructor(f,w){this.graphDB=f,this.serverURL=w,this.backupFileName=`${f.name}_backup.msgpack`,console.log(`\u26A1 Initializing centralized backup for the database: ${this.backupFileName}`),this.ready=this.loadBackupFromOPFS()}async loadBackupFromOPFS(){try{if((await new Promise((w,b)=>{const m=(y)=>{if(y.data.type==="loaded"&&y.data.name===this.backupFileName)this.graphDB.worker.removeEventListener("message",m),w(new Uint8Array(y.data.data));else if(y.data.type==="error")this.graphDB.worker.removeEventListener("message",m),b(new Error(y.data.message||"Error loading the centralized backup"))};this.graphDB.worker.addEventListener("message",m),console.log(`\u26A1 Requesting load of the centralized backup from OPFS: ${this.backupFileName}`),this.graphDB.worker.postMessage({type:"load",name:this.backupFileName})})).byteLength>0)console.log("\u26A1 Centralized backup loaded successfully from OPFS.");else console.warn("\u26A1 The centralized backup file is empty or could not be loaded."),await this.loadFromCentralizedStorage()}catch(f){if(f.message.includes("could not be found"))console.warn("\u26A1 Centralized backup file does not exist in OPFS. Attempting to load from centralized storage."),await this.loadFromCentralizedStorage();else console.error("\u26A1 Could not load the centralized backup:",f.message)}}async saveBackupToOPFS(f){try{await new Promise((w,b)=>{const m=(y)=>{if(y.data.type==="saved"&&y.data.name===this.backupFileName)this.graphDB.worker.removeEventListener("message",m),w();else if(y.data.type==="error")this.graphDB.worker.removeEventListener("message",m),b(new Error(y.data.message||"Error saving the centralized backup"))};this.graphDB.worker.addEventListener("message",m),console.log(`\u26A1 Saving centralized backup to OPFS: ${this.backupFileName}`),this.graphDB.worker.postMessage({type:"save",name:this.backupFileName,content:f})}),console.log("\u26A1 Centralized backup saved successfully to OPFS.")}catch(w){console.error("\u26A1 Error saving the centralized backup:",w.message)}}async syncWithCentralizedStorage(f){try{console.log("\u26A1 Syncing data with centralized storage..."),console.log(`Serialized graph size: ${f.byteLength} bytes`);const w=await fetch(`${this.serverURL}/sync?name=${this.graphDB.name}`,{method:"POST",body:f,headers:{"Content-Type":"application/octet-stream"}});if(!w.ok)throw new Error(`Failed to sync with centralized storage: ${w.statusText}`);console.log("\u26A1 Data successfully synced with centralized storage.")}catch(w){console.error("\u26A1 Error syncing with centralized storage:",w.message)}}async loadFromCentralizedStorage(){try{console.log("\u26A1 Loading data from centralized storage...");const f=await fetch(`${this.serverURL}/load?name=${this.graphDB.name}`,{method:"GET"});if(!f.ok)throw new Error(`Failed to load from centralized storage: ${f.statusText}`);const w=await f.arrayBuffer(),b=new Uint8Array(w);await this.saveBackupToOPFS(b),this.graphDB.graph.deserialize(b),console.log("\u26A1 Graph successfully loaded from centralized storage.")}catch(f){console.error("\u26A1 Error loading from centralized storage:",f.message)}}async checkActivePeers(){return this.graphDB.room.getPeers().length===0}}export{E as withCentralizedBackup,x as default};
